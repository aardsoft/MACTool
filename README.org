* MACTool for Arduino                                                 :TOC_4:
  - [[#introduction][Introduction]]
  - [[#configuration-options][Configuration options]]
    - [[#mactool_use_persistent_configuration][MACTOOL_USE_PERSISTENT_CONFIGURATION]]
    - [[#mactool_init_rand][MACTOOL_INIT_RAND]]
    - [[#mactool_seed_pin][MACTOOL_SEED_PIN]]
    - [[#mactool_mac_prefix][MACTOOL_MAC_PREFIX]]
  - [[#implemented-functions][Implemented functions]]
    - [[#void-init_mac][void init_MAC()]]
    - [[#bool-validate_macchar-mac_string][bool validate_MAC(char *mac_string)]]
    - [[#void-generate_macchar-mac_string][void generate_MAC(char *mac_string)]]
    - [[#void-mac_to_bytechar-mac_string-byte-mac_byte][void MAC_to_byte(char *mac_string, byte *mac_byte)]]
  - [[#hardware][Hardware]]

** Introduction

This is a small helper library for generating and validating MAC addresses as strings as well as converting them to =byte= for use by various Ethernet libraries. The internal representation is a C string, assuming that after initialising the network interface it'll mostly be used for logging in a human readable form, therefore making printing easier.

The current library version offloads most of what is described in the next paragraphs to [[https://github.com/bwachter/PersistentConfiguration][PersistentConfiguration]], and automatically initialises the random seed. It still is a useful read, though, and by defining MACTOOL_USE_PERSISTENT_CONFIGURATION to 0 the old behaviour can be restored. When using PersistentConfiguration make sure to check out the (shorter) example code in that documentation as well - it also shows how to use the MACTool library.

Note that the random number generator needs to be initialised with a random seed from an unused analogue pin (like =randomSeed(analogRead(3))=) to generate truly random (and therefore useful) MAC addresses.

While it could be used to to generate a new MAC address on every reset it is best used with the [[https://www.arduino.cc/en/Reference/EEPROM][EEPROM library]] to generate permanent MAC addresses stored in the EEPROM. Doing this removes the need of compiling different firmware variants just to configure MAC addresses. An example for just storing the MAC address can be found in [[./mac_example/mac_example.ino][mac_example.ino]].

To avoid multiple firmware variants completely it is easiest to define a struct containing customisable variables and store this struct in the EEPROM. The MAC address should be stored in a known not to change location at the very beginning of the struct to allow changes in the data structure without losing the device specific MAC:

#+begin_src C++
#define EEPROM_MAGIC 0xDEAD
struct ConfigData {
    // magic to identify if the configuration is compatible
    unsigned int magic;
    // MAC address used by this device
    char mac[18];
    // node name reported by this device
    char node[20];
    // baud rate used for the serial port
    unsigned int baud_rate;
};

ConfigData data;
#+end_src

This example defines a magic to identify if the configuration section is compatible with the structure of the current firmware. If not, the firmware can try to migrate to the new structure, or reset it to defaults. The MAC address is at a fixed offset from the beginning of the struct, so even if the magic number changed, and the rest of the struct contains garbage the read MAC is still valid.

In practice it'll be required to check the MAC and the rest of the configuration in two steps:

#+begin_src c++
  EEPROM.get(0, data);

  if (!validate_MAC(data.mac)){
    generate_MAC(data.mac);
    // either write the MAC back, or mark a configuration change to trigger
    // later write back. Just marking will reduce amount of flash writes when
    // the whole configuration is corrupt.
  }

  if (data.magic != EEPROM_MAGIC){
    data.magic = EEPROM_MAGIC;
    // reset data to defaults or migrate to new version, not touching the MAC
    // then write back the data with EEPROM.put(0, data);
  }
#+end_src

** Configuration options
Configuration options can be changed using defines in the main sketch. The following defines are available:
*** MACTOOL_USE_PERSISTENT_CONFIGURATION
When set to 1 (default), use [[https://github.com/bwachter/PersistentConfiguration][the PersistentConfiguration]] library. This also makes the init_MAC() function available.
*** MACTOOL_INIT_RAND
When set to 1 (default), have init_MAC() initialize the random seed.
*** MACTOOL_SEED_PIN
Specifies the seed pen for initializing the random seed (default: 3). This pin should be an unused analog pin.
*** MACTOOL_MAC_PREFIX
Specifies a template for MAC addresses to use. Should be a full length address with the last 6 digits set to 0. The default is ="06:DE:AD:00:00:00"=
** Implemented functions
*** void init_MAC()
This function is only available when MACTOOL_USE_PERSISTENT_CONFIGURATION is defined as 1 (the default). In this case this validates the MAC address, generates one if needed, and marks the configuration as changed. It also initialises the random seed, unless disabled.
*** bool validate_MAC(char *mac_string)

Check if the given MAC is valid. Current checks are:

 * are the octets separated by ':'
 * is each octet within the allowed range
 * are there exactly 6 octets

Return values are =true= for a valid MAC, =false= for an invalid MAC. A return value of =false= should be used to trigger generation (and possibly storage) of a valid MAC through =generate_MAC()=.

*** void generate_MAC(char *mac_string)

Generate a new random MAC in =mac_string= by filling the last three octets of the MAC prefix configured in the library (default: 06:DE:AD:00:00:00) with random hex digits.

This function will only generate random addresses if the random number generator has been properly seeded before!

*** void MAC_to_byte(char *mac_string, byte *mac_byte)

Convert a MAC address stored as C string to a byte array as required by Arduinos Ethernet API. Before calling this function the MAC should be verified using =validate_MAC()=, and re-generated with =generate_MAC()=, if necessary.

An Ethernet initialisation with DHCP once MAC correctness has been established looks like this:

#+begin_src C++
  byte mac_b[8];
  MAC_to_byte(mac, mac_b);
  if (Ethernet.begin(mac_b) == 0){
    // ...
  }
#+end_src
** Hardware
Suitable Ethernet modules are described in the [[https://github.com/aardsoft/mqtt_sensor#ethernet][hardware section of mqtt_sensor documentation]].
